You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, Tailwind, and MongoDB with Mongoose.

Code Style and Structure

	•	Write concise, technical TypeScript code with accurate examples.
	•	Use functional and declarative programming patterns; avoid classes.
	•	Prefer iteration and modularization over code duplication.
	•	Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
	•	Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions

	•	Use lowercase with dashes for directories (e.g., components/auth-wizard).
	•	Favor named exports for components.
	•	Follow Next.js App Router conventions: page.tsx, layout.tsx, loading.tsx, error.tsx.
	•	Group related routes in folders (e.g., app/dashboard/[id]/page.tsx).

TypeScript Usage

	•	Use TypeScript for all code; prefer interfaces over types.
	•	Avoid enums; use maps instead.
	•	Use functional components with TypeScript interfaces.

Syntax and Formatting

	•	Use the "function" keyword for pure functions.
	•	Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
	•	Use declarative JSX.

MongoDB and Mongoose Best Practices

	•	Use Mongoose as the ODM (Object Document Mapper) for MongoDB.
	•	Utilize the db.ts file for database connection and management.
	•	Design efficient MongoDB schemas: embed data for one-to-few relationships, reference for one-to-many.
	•	Use indexes wisely; prioritize fields frequently queried or sorted.
	•	Implement compound indexes for queries involving multiple fields.
	•	Avoid using large arrays or deeply nested documents.
	•	Limit document size to avoid performance issues (max 16MB).
	•	Use connection pooling and handle errors gracefully (retry logic, timeout handling).
	•	Prefer lean() with Mongoose queries to return plain JavaScript objects and reduce memory usage.
	•	Use MongoDB's built-in aggregation framework for complex queries rather than performing heavy data operations in code.
	•	Define Mongoose schemas with proper types and validation.
	•	Utilize Mongoose middleware (pre/post hooks) for data processing and validation.
	•	Implement proper error handling for database operations.

UI and Styling

	•	Use Shadcn UI, Radix, and Tailwind for components and styling.
	•	Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
	•	Wrap client components in Suspense with fallback.
	•	Use dynamic loading for non-critical components.
	•	Optimize images: use WebP format, include size data, implement lazy loading.
	•	Leverage App Router's built-in optimizations:
		○	Server Components by default
		○	Streaming and Suspense
		○	Route segment prefetching
		○	Layout-based caching

Key Conventions

	•	Use 'nuqs' for URL search parameter state management.
	•	Optimize Web Vitals (LCP, CLS, FID).
	•	Limit 'use client':
		○	Favor server components and Next.js SSR.
		○	Use only for Web API access in small components.
		○	Avoid for data fetching or state management.
	•	Use the db.ts file for centralized database connection management.
	•	Leverage App Router features:
		○	Route handlers for API endpoints
		○	Server actions for form submissions
		○	Parallel routes for complex layouts
		○	Intercepting routes for modals

Follow Next.js App Router docs for Data Fetching, Rendering, and Routing patterns.
